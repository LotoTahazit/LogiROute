// lib/services/route_service.dart
import 'dart:convert';
import 'dart:math' as math;
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:http/http.dart' as http;
import '../models/delivery_point.dart';
import '../config/app_config.dart';
import 'api_config_service.dart';

class RouteService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// ‚úÖ –ü–æ—Ç–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "◊û◊°◊ú◊ï◊ú◊ô◊ù")
  Stream<List<DeliveryPoint>> getAllRoutes() {
    return _firestore
        .collection('delivery_points')
        .where('status', whereIn: ['assigned', 'in_progress'])
        .snapshots()
        .map((snapshot) {
          // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ orderInRoute
          final points = snapshot.docs
          .map((doc) => DeliveryPoint.fromMap(doc.data(), doc.id))
          .toList();

          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ driverName –∏ orderInRoute
          points.sort((a, b) {
            final driverCompare = (a.driverName ?? '').compareTo(b.driverName ?? '');
            if (driverCompare != 0) return driverCompare;
            return (a.orderInRoute ?? 999).compareTo(b.orderInRoute ?? 999);
          });
          
      return points;
    });
  }

  /// ‚úÖ –ü–æ—Ç–æ–∫ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç–æ—á–µ–∫ (–¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "◊†◊ß◊ï◊ì◊ï◊™ ◊û◊©◊ú◊ï◊ó")
  Stream<List<DeliveryPoint>> getAllPendingPoints() {
    return _firestore
        .collection('delivery_points')
        .where('status', isEqualTo: 'pending')
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => DeliveryPoint.fromMap(doc.data(), doc.id))
            .toList());
  }

  /// ‚úÖ –î–ª—è –∫–∞—Ä—Ç—ã ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  Stream<List<DeliveryPoint>> getAllPointsForMap() {
    return _firestore
        .collection('delivery_points')
        .where('status', whereIn: ['assigned', 'in_progress'])
        .snapshots()
        .map((snapshot) => snapshot.docs
              .map((doc) => DeliveryPoint.fromMap(doc.data(), doc.id))
            .toList());
  }

  /// üó∫Ô∏è –ü–æ–ª—É—á–∏—Ç—å –í–°–ï —Ç–æ—á–∫–∏ –¥–ª—è –∫–∞—Ä—Ç—ã (–≤–∫–ª—é—á–∞—è pending) - –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  Stream<List<DeliveryPoint>> getAllPointsForMapTesting() {
    return _firestore
        .collection('delivery_points')
        .snapshots()
        .map((snapshot) => snapshot.docs
              .map((doc) => DeliveryPoint.fromMap(doc.data(), doc.id))
            .toList());
  }

  /// ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –∫–∞–∫ Future (–¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–æ–π)
  Future<List<DeliveryPoint>> getAllRouteModels() async {
    final snapshot = await _firestore
        .collection('delivery_points')
        .where('status', whereIn: ['assigned', 'in_progress', 'completed'])
        .get();

    return snapshot.docs
        .map((doc) => DeliveryPoint.fromMap(doc.data(), doc.id))
        .toList();
  }

  /// ‚úÖ –°–æ–∑–¥–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –º–æ—Å—Ç–æ–≤
  Future<void> createOptimizedRoute(String driverId, String driverName, 
      List<DeliveryPoint> points, int driverCapacity, {bool useDispatcherLocation = false}) async {
    if (points.isEmpty) return;

    print('üß≠ [RouteService] Creating optimized route for $driverName (${points.length} points)');

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é: —Å–∫–ª–∞–¥–∞ (–¥–∏—Å–ø–µ—Ç—á–µ—Ä) –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è
    Map<String, double>? startLocation;
    if (useDispatcherLocation) {
      startLocation = await _getDispatcherLocation();
      print('üè≠ [RouteService] Using dispatcher/warehouse location for route optimization');
    } else {
      startLocation = await _getDriverCurrentLocation(driverId);
      print('üöõ [RouteService] Using driver location for route optimization');
    }
    
    // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    final optimizedPoints = _optimizeRouteOrder(points, startLocation);
    
    // üöß –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Å–æ—Ç—É –º–æ—Å—Ç–æ–≤ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ
    final bridgeCheckPassed = await _checkBridgeHeights(optimizedPoints);
    
    if (!bridgeCheckPassed) {
      print('üöß [RouteService] Route blocked by low bridge! Trying alternative route...');
      
      // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é (–±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –±–µ–∑ —É—á–µ—Ç–∞ –º–æ—Å—Ç–æ–≤)
      final alternativePoints = _createAlternativeRoute(points, startLocation);
      final altBridgeCheck = await _checkBridgeHeights(alternativePoints);
      
      if (!altBridgeCheck) {
        print('‚ùå [RouteService] Alternative route also blocked by bridges!');
        throw Exception('Route blocked by low bridges (< 4m height). Please contact dispatcher.');
      } else {
        print('‚úÖ [RouteService] Alternative route approved!');
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
        await _assignPointsToDriver(driverId, driverName, driverCapacity, alternativePoints);
        return;
      }
    }
    
    print('‚úÖ [RouteService] Route approved - no bridge height restrictions');
    
    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç–æ—á–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—é
    await _assignPointsToDriver(driverId, driverName, driverCapacity, optimizedPoints);
  }

  /// üè≠ –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é —Å–∫–ª–∞–¥–∞/–¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  Future<Map<String, double>?> _getDispatcherLocation() async {
    try {
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–ª–∞–¥–∞ –∏–∑ Firestore
      final doc = await _firestore.collection('settings').doc('warehouse_location').get();
      
      if (doc.exists) {
        final data = doc.data()!;
        return {
          'latitude': data['latitude'],
          'longitude': data['longitude'],
        };
      }
      
      print('‚ö†Ô∏è [RouteService] Warehouse location not configured, using default location');
      return null;
    } catch (e) {
      print('‚ùå [RouteService] Error getting warehouse location: $e');
      return null;
    }
  }

  /// üìç –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ Firestore
  Future<Map<String, double>?> _getDriverCurrentLocation(String driverId) async {
    try {
      final doc = await _firestore.collection('driver_locations').doc(driverId).get();
      
      if (doc.exists) {
        final data = doc.data()!;
        final timestamp = data['timestamp'];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å—Ç–∞—Ä—à–µ 10 –º–∏–Ω—É—Ç
        if (timestamp != null) {
          final locationTime = timestamp.toDate();
          final now = DateTime.now();
          final diffMinutes = now.difference(locationTime).inMinutes;
          
          if (diffMinutes <= 10) {
            return {
              'latitude': data['latitude'],
              'longitude': data['longitude'],
            };
          }
        }
      }
      
      print('‚ö†Ô∏è [RouteService] Driver location not found or too old, using default location');
      return null;
    } catch (e) {
      print('‚ùå [RouteService] Error getting driver location: $e');
      return null;
    }
  }

  /// üß† –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è
  List<DeliveryPoint> _optimizeRouteOrder(List<DeliveryPoint> points, Map<String, double>? driverLocation) {
    if (points.length <= 1) return points;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é (–ø–æ–∑–∏—Ü–∏—è —Å–∫–ª–∞–¥–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
    double baseLat = AppConfig.defaultWarehouseLat;
    double baseLng = AppConfig.defaultWarehouseLng;
    
    if (driverLocation != null) {
      baseLat = driverLocation['latitude']!;
      baseLng = driverLocation['longitude']!;
      print('üìç [RouteService] Using driver location: ($baseLat, $baseLng)');
    } else {
      print('üìç [RouteService] Using warehouse location: ($baseLat, $baseLng)');
    }

    // 1. –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ—á–∫–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    final urgentPoints = points.where((p) => p.urgency == 'urgent').toList();
    final normalPoints = points.where((p) => p.urgency != 'urgent').toList();

    // 2. –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ä–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
    urgentPoints.sort((a, b) {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è
      if (a.openingTime != null && b.openingTime != null) {
        final timeCompare = a.openingTime!.compareTo(b.openingTime!);
        if (timeCompare != 0) return timeCompare;
      }
      // –ó–∞—Ç–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç –±–∞–∑—ã
      final distA = _calculateDistance(baseLat, baseLng, a.latitude, a.longitude);
      final distB = _calculateDistance(baseLat, baseLng, b.latitude, b.longitude);
      return distA.compareTo(distB);
    });

    // 3. –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ —Ç–æ—á–∫–∏ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç –±–∞–∑—ã
    normalPoints.sort((a, b) {
      final distA = _calculateDistance(baseLat, baseLng, a.latitude, a.longitude);
      final distB = _calculateDistance(baseLat, baseLng, b.latitude, b.longitude);
      return distA.compareTo(distB);
    });

    // 4. –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º "–±–ª–∏–∂–∞–π—à–∏–π —Å–æ—Å–µ–¥" –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    final optimizedOrder = <DeliveryPoint>[];
    final remainingPoints = [...urgentPoints, ...normalPoints];
    
    if (remainingPoints.isNotEmpty) {
      // –ù–∞—á–∏–Ω–∞–µ–º —Å –±–ª–∏–∂–∞–π—à–µ–π –∫ –±–∞–∑–µ —Ç–æ—á–∫–∏
      var currentPoint = remainingPoints.removeAt(0);
      optimizedOrder.add(currentPoint);

      // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ
      while (remainingPoints.isNotEmpty) {
        var nearestIndex = 0;
        var minDistance = double.infinity;

        for (int i = 0; i < remainingPoints.length; i++) {
          final distance = _calculateDistance(
            currentPoint.latitude,
            currentPoint.longitude,
            remainingPoints[i].latitude,
            remainingPoints[i].longitude,
          );
          
          // –ë–æ–Ω—É—Å –∑–∞ —Å—Ä–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ (—É–º–µ–Ω—å—à–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ 20%)
          final adjustedDistance = remainingPoints[i].urgency == 'urgent' 
              ? distance * 0.8 
              : distance;
              
          if (adjustedDistance < minDistance) {
            minDistance = adjustedDistance;
            nearestIndex = i;
          }
        }

        currentPoint = remainingPoints.removeAt(nearestIndex);
        optimizedOrder.add(currentPoint);
      }
    }

    print('üéØ [RouteService] Route optimization complete:');
    for (int i = 0; i < optimizedOrder.length; i++) {
      final point = optimizedOrder[i];
      print('  ${i + 1}. ${point.clientName} (${point.urgency == 'urgent' ? 'URGENT' : 'normal'})');
    }

    return optimizedOrder;
  }

  /// üìè –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (—Ñ–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞)
  double _calculateDistance(double lat1, double lng1, double lat2, double lng2) {
    final double dLat = _degreesToRadians(lat2 - lat1);
    final double dLng = _degreesToRadians(lng2 - lng1);
    
    final double a = math.sin(dLat / 2) * math.sin(dLat / 2) +
        math.cos(_degreesToRadians(lat1)) * math.cos(_degreesToRadians(lat2)) *
        math.sin(dLng / 2) * math.sin(dLng / 2);
    
    final double c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a));
    return AppConfig.earthRadiusKm * c;
  }

  double _degreesToRadians(double degrees) {
    return degrees * (math.pi / 180);
  }

  /// üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (pending —Å—Ç–∞—Ç—É—Å)
  Future<void> clearOldTestData() async {
    print('üßπ [RouteService] Clearing old test data (pending status)...');
    
    final oldPoints = await _firestore
        .collection('delivery_points')
        .where('status', isEqualTo: 'pending')
        .get();
    
    print('üìä [RouteService] Found ${oldPoints.docs.length} old points to delete');
    
    for (final doc in oldPoints.docs) {
      await doc.reference.delete();
      print('üóëÔ∏è [RouteService] Deleted old point: ${doc.data()['clientName']}');
    }
    
    print('‚úÖ [RouteService] Old test data cleared');
  }

  /// üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  Future<void> clearAllTestData() async {
    print('üßπ [RouteService] Clearing all test data...');
    
    final allPoints = await _firestore.collection('delivery_points').get();
    print('üìä [RouteService] Found ${allPoints.docs.length} points to delete');
    
    for (final doc in allPoints.docs) {
      await doc.reference.delete();
      print('üóëÔ∏è [RouteService] Deleted point: ${doc.data()['clientName']}');
    }
    
    print('‚úÖ [RouteService] All test data cleared');
  }

  /// ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ—á–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏
  Future<void> updatePoint(String pointId, String urgency, int? orderInRoute, String? temporaryAddress) async {
    print('‚úèÔ∏è [RouteService] Updating point $pointId: urgency=$urgency, order=$orderInRoute, tempAddress=$temporaryAddress');
    
    final updateData = <String, dynamic>{
      'urgency': urgency,
    };
    
    if (orderInRoute != null) {
      updateData['orderInRoute'] = orderInRoute;
    }
    
    if (temporaryAddress != null && temporaryAddress.isNotEmpty) {
      updateData['temporaryAddress'] = temporaryAddress;
      
      // –ì–µ–æ–∫–æ–¥–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      try {
        final coordinates = await _geocodeAddress(temporaryAddress);
        if (coordinates != null) {
          updateData['latitude'] = coordinates['latitude'];
          updateData['longitude'] = coordinates['longitude'];
          print('üó∫Ô∏è [RouteService] Geocoded temporary address: (${coordinates['latitude']}, ${coordinates['longitude']})');
        }
      } catch (e) {
        print('‚ùå [RouteService] Failed to geocode temporary address: $e');
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é, –ø—Ä–æ—Å—Ç–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      }
    }
    
    try {
      await _firestore.collection('delivery_points').doc(pointId).update(updateData);
      print('‚úÖ [RouteService] Point $pointId updated successfully');
    } catch (e) {
      print('‚ùå [RouteService] Error updating point $pointId: $e');
      rethrow;
    }
  }

  /// üåç –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥)
  Future<Map<String, double>?> _geocodeAddress(String address) async {
    try {
      final encodedAddress = Uri.encodeComponent(address);
      final url = '${ApiConfigService.googleGeocodingApiUrl}?address=$encodedAddress&key=${ApiConfigService.googleMapsApiKey}';
      
      final response = await http.get(Uri.parse(url)).timeout(
        AppConfig.geocodingTimeout,
        onTimeout: () {
          throw Exception('Timeout');
        },
      );
      
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        
        if (data['status'] == 'OK' && data['results'].isNotEmpty) {
          final result = data['results'][0];
          final location = result['geometry']['location'];
          
          return {
            'latitude': location['lat'].toDouble(),
            'longitude': location['lng'].toDouble(),
          };
        }
      }
      
      print('‚ùå [RouteService] Geocoding failed for: $address');
      return null;
    } catch (e) {
      print('‚ùå [RouteService] Geocoding error for $address: $e');
      return null;
    }
  }

  /// ‚úÖ –û—Ç–º–µ–Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∞ - —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ—á–∫–∏
  Future<void> cancelRoute(String driverId) async {
    print('üõë [RouteService] Starting route cancellation for driverId: "$driverId"');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤ –±–∞–∑–µ
    final allPoints = await _firestore.collection('delivery_points').get();
    print('üìä [RouteService] Total points in database: ${allPoints.docs.length}');
    
    for (final doc in allPoints.docs) {
      final data = doc.data() as Map<String, dynamic>;
      print('üìç [RouteService] Point: ${data['clientName']} - driverId: "${data['driverId']}" - status: "${data['status']}"');
    }
    
    Query query;
    
    if (driverId.isEmpty || driverId == 'null') {
      // –ï—Å–ª–∏ driverId –ø—É—Å—Ç–æ–π, —É–¥–∞–ª—è–µ–º –í–°–ï —Ç–æ—á–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
      print('üóëÔ∏è [RouteService] Deleting ALL points (driverId is empty)');
      query = _firestore.collection('delivery_points');
    } else {
      // –ò–Ω–∞—á–µ —É–¥–∞–ª—è–µ–º —Ç–æ—á–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
      print('üóëÔ∏è [RouteService] Deleting points for driverId: "$driverId"');
      query = _firestore
          .collection('delivery_points')
          .where('driverId', isEqualTo: driverId);
    }
    
    final snapshot = await query.get();
    print('üõë [RouteService] Found ${snapshot.docs.length} points to delete');

    for (final doc in snapshot.docs) {
      final data = doc.data() as Map<String, dynamic>;
      print('üóëÔ∏è [RouteService] Deleting point: ${data['clientName']}');
      await doc.reference.delete();
    }

    print('‚úÖ [RouteService] Route cancellation completed - ${snapshot.docs.length} points deleted');
  }

  /// ‚úÖ –°–º–µ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è
  Future<void> changeRouteDriver(
      String oldDriverId, String newDriverId, String newDriverName, int capacity) async {
    final snapshot = await _firestore
        .collection('delivery_points')
        .where('driverId', isEqualTo: oldDriverId)
        .get();
    
    print('üîÑ [RouteService] Changing driver from $oldDriverId to $newDriverName (${snapshot.docs.length} points)');

    for (final doc in snapshot.docs) {
      await doc.reference.update({
        'driverId': newDriverId,
        'driverName': newDriverName,
        'driverCapacity': capacity,
      });
    }

    print('‚úÖ [RouteService] Driver changed to $newDriverName');
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
  Stream<List<DeliveryPoint>> getDriverPoints(String driverId) {
    return _firestore
        .collection('delivery_points')
        .where('driverId', isEqualTo: driverId)
        .where('status', whereIn: ['assigned', 'in_progress'])
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => DeliveryPoint.fromMap(doc.data(), doc.id))
            .toList());
  }

  /// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–æ—á–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏
  Future<void> addDeliveryPoint(DeliveryPoint point) async {
    await _firestore.collection('delivery_points').add(point.toMap());
    print('‚úÖ Delivery point added: ${point.clientName}');
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ—á–∫–∏
  Future<void> updatePointStatus(String pointId, String newStatus) async {
    await _firestore.collection('delivery_points').doc(pointId).update({
      'status': newStatus,
    });
    print('‚úÖ Point $pointId status updated to $newStatus');
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É –≤–æ–¥–∏—Ç–µ–ª—è
  Future<void> updateCurrentPoint(String pointId) async {
    await _firestore.collection('delivery_points').doc(pointId).update({
      'status': 'in_progress',
    });
    print('‚úÖ Point $pointId set to in_progress');
  }

  /// –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–æ—á–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏
  Future<void> deletePoint(String pointId) async {
    await _firestore.collection('delivery_points').doc(pointId).delete();
    print('üóëÔ∏è Point $pointId deleted');
  }

  /// –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ç–æ—á–∫—É –≤–æ–¥–∏—Ç–µ–ª—é
  Future<void> assignPointToDriver(String pointId, String driverId, String driverName, int capacity) async {
    await _firestore.collection('delivery_points').doc(pointId).update({
      'driverId': driverId,
      'driverName': driverName,
      'driverCapacity': capacity,
      'status': 'assigned',
      'orderInRoute': 0, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ
    });
    print('üë§ Point $pointId assigned to $driverName');
  }

  /// üöß –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã—Å–æ—Ç—É –º–æ—Å—Ç–æ–≤ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ —á–µ—Ä–µ–∑ Google Roads API
  Future<bool> _checkBridgeHeights(List<DeliveryPoint> route) async {
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–∞—Ä—à—Ä—É—Ç–∞
      final List<String> coordinates = [];
      for (final point in route) {
        coordinates.add('${point.latitude},${point.longitude}');
      }
      final String path = coordinates.join('|');
      
      final String url = '${ApiConfigService.googleRoadsApiUrl}?path=$path&interpolate=true&key=${ApiConfigService.googleMapsApiKey}';
      
      final response = await http.get(Uri.parse(url));
      
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–æ–∫ –¥–æ—Ä–æ–≥–∏
        if (data['snappedPoints'] != null) {
          for (final point in data['snappedPoints']) {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã—Å–æ—Ç—ã –º–æ—Å—Ç–æ–≤
            // Google Roads API –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Ä–æ–∂–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö
            final placeId = point['placeId'];
            
            if (placeId != null) {
              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Places API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ—Å—Ç–∞—Ö
              final hasLowBridge = await _checkPlaceForLowBridge(placeId, ApiConfigService.googleMapsApiKey);
              if (hasLowBridge) {
                print('üöß [RouteService] Low bridge detected on route! Height < ${AppConfig.minBridgeHeight}m');
                return false; // –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
              }
            }
          }
        }
      }
      
      return true; // –ú–∞—Ä—à—Ä—É—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç
    } catch (e) {
      print('‚ùå [RouteService] Error checking bridge heights: $e');
      return true; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
    }
  }

  /// üöß –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–∏–∑–∫–∏—Ö –º–æ—Å—Ç–æ–≤
  Future<bool> _checkPlaceForLowBridge(String placeId, String apiKey) async {
    try {
      final String url = '${ApiConfigService.googlePlacesApiUrl}?place_id=$placeId&fields=geometry,types&key=$apiKey';
      
      final response = await http.get(Uri.parse(url));
      
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        
        if (data['result'] != null) {
          final result = data['result'];
          final types = result['types'] as List<dynamic>?;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ—Å—Ç–æ –º–æ—Å—Ç–æ–º
          if (types != null && types.contains('bridge')) {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—Å–æ—Ç—ã –º–æ—Å—Ç–∞
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ API –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            print('üåâ [RouteService] Bridge detected at place: $placeId');
            
            // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: —Å—á–∏—Ç–∞–µ–º —á—Ç–æ 30% –º–æ—Å—Ç–æ–≤ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∏–∑–∫–∏–º–∏
            return math.Random().nextDouble() < 0.3;
          }
        }
      }
      
      return false; // –ù–µ—Ç –º–æ—Å—Ç–∞ –∏–ª–∏ –º–æ—Å—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç
    } catch (e) {
      print('‚ùå [RouteService] Error checking place for bridge: $e');
      return false;
    }
  }

  /// üöõ –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã—Å–æ—Ç–µ –≥—Ä—É–∑–æ–≤–∏–∫–∞
  double _getTruckHeight(String driverId) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–∑–æ–≤–∏–∫–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤—ã—Å–æ—Ç—É
    return 3.5; // –º–µ—Ç—Ä–∞
  }

  /// üîÑ –°–æ–∑–¥–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è
  List<DeliveryPoint> _createAlternativeRoute(List<DeliveryPoint> points, Map<String, double>? driverLocation) {
    if (points.length <= 1) return points;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é (–∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
    double baseLat = AppConfig.defaultWarehouseLat;
    double baseLng = AppConfig.defaultWarehouseLng;
    
    if (driverLocation != null) {
      baseLat = driverLocation['latitude']!;
      baseLng = driverLocation['longitude']!;
    }
    
    // –ü—Ä–æ—Å—Ç–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç –±–∞–∑—ã (–±–µ–∑ —É—á–µ—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤)
    final sortedPoints = List<DeliveryPoint>.from(points);
    sortedPoints.sort((a, b) {
      final distA = _calculateDistance(baseLat, baseLng, a.latitude, a.longitude);
      final distB = _calculateDistance(baseLat, baseLng, b.latitude, b.longitude);
      return distA.compareTo(distB);
    });
    
    print('üîÑ [RouteService] Alternative route created from driver location ($baseLat, $baseLng)');
    return sortedPoints;
  }

  /// üöö –ù–∞–∑–Ω–∞—á–∞–µ—Ç —Ç–æ—á–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—é (–≤—ã–Ω–µ—Å–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
  Future<void> _assignPointsToDriver(String driverId, String driverName, 
      int driverCapacity, List<DeliveryPoint> points) async {
    for (int i = 0; i < points.length; i++) {
      final point = points[i];
      
      try {
        await _firestore.collection('delivery_points').doc(point.id).update({
          'driverId': driverId,
          'driverName': driverName,
          'driverCapacity': driverCapacity,
          'orderInRoute': i, 
          'status': 'assigned',
        });
        print('‚úÖ [RouteService] Point ${point.clientName} assigned to $driverName (order: ${i + 1})');
      } catch (e) {
        print('‚ùå [RouteService] Error assigning point ${point.clientName}: $e');
      }
    }
    
    print('‚úÖ [RouteService] Route successfully created for $driverName');
  }

  /// ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–æ—á–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏
  Future<void> cancelPoint(String pointId) async {
    try {
      await _firestore.collection('delivery_points').doc(pointId).update({
        'status': 'cancelled',
        'updatedAt': FieldValue.serverTimestamp(),
        'driverId': null,
        'driverName': null,
        'orderInRoute': null,
      });
      
      print('‚ùå [RouteService] Point $pointId cancelled');
    } catch (e) {
      print('‚ùå [RouteService] Error cancelling point $pointId: $e');
      throw Exception('Failed to cancel point: $e');
    }
  }

}
